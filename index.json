{
  "api/QsNet.Constants.HexTable.html": {
    "href": "api/QsNet.Constants.HexTable.html",
    "title": "Class HexTable | QsNet",
    "summary": "Class HexTable Namespace QsNet.Constants Assembly QsNet.dll Hex table of all 256 characters public static class HexTable Inheritance object HexTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/QsNet.Constants.html": {
    "href": "api/QsNet.Constants.html",
    "title": "Namespace QsNet.Constants | QsNet",
    "summary": "Namespace QsNet.Constants Classes HexTable Hex table of all 256 characters"
  },
  "api/QsNet.Enums.DecodeKind.html": {
    "href": "api/QsNet.Enums.DecodeKind.html",
    "title": "Enum DecodeKind | QsNet",
    "summary": "Enum DecodeKind Namespace QsNet.Enums Assembly QsNet.dll Indicates the decoding context for a scalar token. public enum DecodeKind Fields Key = 0 The token is a key (or a key segment). Implementations typically avoid turning %2E/%2e into a literal dot before key splitting when this kind is used, to match the semantics of the reference qs library. Value = 1 The token is a value. Values are decoded normally (e.g., percent-decoding and charset handling) without any key-specific protections. Remarks Use Key when decoding a key or key segment so the decoder can apply key-specific rules (for example, preserving percent-encoded dots %2E/%2e until after key splitting). Use Value for normal value decoding."
  },
  "api/QsNet.Enums.Duplicates.html": {
    "href": "api/QsNet.Enums.Duplicates.html",
    "title": "Enum Duplicates | QsNet",
    "summary": "Enum Duplicates Namespace QsNet.Enums Assembly QsNet.dll An enum of all available duplicate key handling strategies. public enum Duplicates Fields Combine = 0 Combine duplicate keys into a single key with an array of values. First = 1 Use the first value for duplicate keys. Last = 2 Use the last value for duplicate keys."
  },
  "api/QsNet.Enums.Format.html": {
    "href": "api/QsNet.Enums.Format.html",
    "title": "Enum Format | QsNet",
    "summary": "Enum Format Namespace QsNet.Enums Assembly QsNet.dll An enum of all available format options. public enum Format Extension Methods FormatExtensions.GetFormatter(Format) Fields Rfc1738 = 1 RFC 1738 format https://datatracker.ietf.org/doc/html/rfc1738 Rfc3986 = 0 RFC 3986 format (default) https://datatracker.ietf.org/doc/html/rfc3986"
  },
  "api/QsNet.Enums.FormatExtensions.html": {
    "href": "api/QsNet.Enums.FormatExtensions.html",
    "title": "Class FormatExtensions | QsNet",
    "summary": "Class FormatExtensions Namespace QsNet.Enums Assembly QsNet.dll Extension methods for Format enum to provide formatter functionality. public static class FormatExtensions Inheritance object FormatExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFormatter(Format) Gets the formatter function for the specified format. public static Formatter GetFormatter(this Format format) Parameters format Format The format Returns Formatter The formatter function"
  },
  "api/QsNet.Enums.Formatter.html": {
    "href": "api/QsNet.Enums.Formatter.html",
    "title": "Delegate Formatter | QsNet",
    "summary": "Delegate Formatter Namespace QsNet.Enums Assembly QsNet.dll A delegate for formatting string values. public delegate string Formatter(string value) Parameters value string The value to format Returns string The formatted string"
  },
  "api/QsNet.Enums.ListFormat.html": {
    "href": "api/QsNet.Enums.ListFormat.html",
    "title": "Enum ListFormat | QsNet",
    "summary": "Enum ListFormat Namespace QsNet.Enums Assembly QsNet.dll An enum of all available list format options. public enum ListFormat Extension Methods ListFormatExtensions.GetGenerator(ListFormat) Fields Brackets = 0 Use brackets to represent list items, for example foo[]=123&foo[]=456&foo[]=789 Comma = 1 Use commas to represent list items, for example foo=123,456,789 Indices = 3 Use indices in brackets to represent list items, for example foo[0]=123&foo[1]=456&foo[2]=789 Repeat = 2 Repeat the same key to represent list items, for example foo=123&foo=456&foo=789"
  },
  "api/QsNet.Enums.ListFormatExtensions.html": {
    "href": "api/QsNet.Enums.ListFormatExtensions.html",
    "title": "Class ListFormatExtensions | QsNet",
    "summary": "Class ListFormatExtensions Namespace QsNet.Enums Assembly QsNet.dll Extension methods for ListFormat enum to provide generator functionality. public static class ListFormatExtensions Inheritance object ListFormatExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetGenerator(ListFormat) Gets the generator function for the specified list format. public static ListFormatGenerator GetGenerator(this ListFormat format) Parameters format ListFormat The list format Returns ListFormatGenerator The generator function"
  },
  "api/QsNet.Enums.ListFormatGenerator.html": {
    "href": "api/QsNet.Enums.ListFormatGenerator.html",
    "title": "Delegate ListFormatGenerator | QsNet",
    "summary": "Delegate ListFormatGenerator Namespace QsNet.Enums Assembly QsNet.dll A delegate for generating list format strings. public delegate string ListFormatGenerator(string prefix, string? key) Parameters prefix string The prefix string key string The optional key string Returns string The formatted string"
  },
  "api/QsNet.Enums.Sentinel.html": {
    "href": "api/QsNet.Enums.Sentinel.html",
    "title": "Enum Sentinel | QsNet",
    "summary": "Enum Sentinel Namespace QsNet.Enums Assembly QsNet.dll An enum of all available sentinels. public enum Sentinel Extension Methods SentinelExtensions.GetEncoded(Sentinel) SentinelExtensions.GetValue(Sentinel) SentinelExtensions.ToString(Sentinel) Fields Charset = 1 These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded. Iso = 0 This is what browsers will submit when the ✓ character occurs in an application/x-www-form-urlencoded body and the encoding of the page containing the form is iso-8859-1, or when the submitted form has an accept-charset attribute of iso-8859-1. Presumably also with other charsets that do not contain the ✓ character, such as us-ascii."
  },
  "api/QsNet.Enums.SentinelExtensions.html": {
    "href": "api/QsNet.Enums.SentinelExtensions.html",
    "title": "Class SentinelExtensions | QsNet",
    "summary": "Class SentinelExtensions Namespace QsNet.Enums Assembly QsNet.dll Extension methods for Sentinel enum to provide value and encoded functionality. public static class SentinelExtensions Inheritance object SentinelExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEncoded(Sentinel) Gets the encoded value for the specified sentinel. public static string GetEncoded(this Sentinel sentinel) Parameters sentinel Sentinel The sentinel Returns string The encoded string GetValue(Sentinel) Gets the value for the specified sentinel. public static string GetValue(this Sentinel sentinel) Parameters sentinel Sentinel The sentinel Returns string The value string ToString(Sentinel) Gets the string representation (encoded value) for the specified sentinel. public static string ToString(this Sentinel sentinel) Parameters sentinel Sentinel The sentinel Returns string The encoded string"
  },
  "api/QsNet.Enums.html": {
    "href": "api/QsNet.Enums.html",
    "title": "Namespace QsNet.Enums | QsNet",
    "summary": "Namespace QsNet.Enums Classes FormatExtensions Extension methods for Format enum to provide formatter functionality. ListFormatExtensions Extension methods for ListFormat enum to provide generator functionality. SentinelExtensions Extension methods for Sentinel enum to provide value and encoded functionality. Enums DecodeKind Indicates the decoding context for a scalar token. Duplicates An enum of all available duplicate key handling strategies. Format An enum of all available format options. ListFormat An enum of all available list format options. Sentinel An enum of all available sentinels. Delegates Formatter A delegate for formatting string values. ListFormatGenerator A delegate for generating list format strings."
  },
  "api/QsNet.Extensions.html": {
    "href": "api/QsNet.Extensions.html",
    "title": "Class Extensions | QsNet",
    "summary": "Class Extensions Namespace QsNet Assembly QsNet.dll Extensions for encoding and decoding query strings. Provides methods to convert between query strings and dictionaries. This class is part of the QsNet library, which handles query string encoding and decoding. It includes methods for both encoding a dictionary into a query string and decoding a query string into a dictionary. public static class Extensions Inheritance object Extensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToQueryMap(string, DecodeOptions?) Decode a query string into a Dictionary. public static Dictionary<string, object?> ToQueryMap(this string queryString, DecodeOptions? options = null) Parameters queryString string The query string to decode options DecodeOptions Optional decoder settings Returns Dictionary<string, object> A Dictionary containing the decoded key-value pairs ToQueryString(Dictionary<string, object?>, EncodeOptions?) Encode a Dictionary into a query string. public static string ToQueryString(this Dictionary<string, object?> dictionary, EncodeOptions? options = null) Parameters dictionary Dictionary<string, object> The dictionary to encode options EncodeOptions Optional encoder settings Returns string The encoded query string"
  },
  "api/QsNet.Models.DateSerializer.html": {
    "href": "api/QsNet.Models.DateSerializer.html",
    "title": "Delegate DateSerializer | QsNet",
    "summary": "Delegate DateSerializer Namespace QsNet.Models Assembly QsNet.dll DateSerializer function that takes a DateTime and returns a String representation of the date. This can be used to customize how DateTime objects are serialized in the encoded output. If no serializer is provided, the default ISO format will be used. public delegate string DateSerializer(DateTime date) Parameters date DateTime The date to serialize Returns string The serialized date string"
  },
  "api/QsNet.Models.DecodeOptions.html": {
    "href": "api/QsNet.Models.DecodeOptions.html",
    "title": "Class DecodeOptions | QsNet",
    "summary": "Class DecodeOptions Namespace QsNet.Models Assembly QsNet.dll Options that configure the output of Qs.Decode. public sealed class DecodeOptions Inheritance object DecodeOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DecodeOptions() Initializes a new instance of the DecodeOptions class. public DecodeOptions() Properties AllowDots Set to true to parse dot dictionary notation in the encoded input. Note: when not explicitly set, this property implicitly evaluates to true if DecodeDotInKeys is true, to keep option combinations coherent. public bool AllowDots { get; init; } Property Value bool AllowEmptyLists Set to true to allow empty list values inside dictionaries in the encoded input. public bool AllowEmptyLists { get; init; } Property Value bool AllowSparseLists Set to true to allow sparse lists in the encoded input. Note: If set to true, the lists will contain null values for missing values. public bool AllowSparseLists { get; init; } Property Value bool Charset The character encoding to use when decoding the input. public Encoding Charset { get; init; } Property Value Encoding CharsetSentinel Some services add an initial utf8=✓ value to forms so that old InternetExplorer versions are more likely to submit the form as UTF-8. Additionally, the server can check the value against wrong encodings of the checkmark character and detect that a query string or application/x-www-form-urlencoded body was not sent as UTF-8, e.g. if the form had an accept-charset parameter or the containing page had a different character set. QS supports this mechanism via the CharsetSentinel option. If specified, the UTF-8 parameter will be omitted from the returned dictionary. It will be used to switch to ISO-8859-1/UTF-8 mode depending on how the checkmark is encoded. Important: When you specify both the Charset option and the CharsetSentinel option, the charset will be overridden when the request contains a UTF-8 parameter from which the actual charset can be deduced. In that sense the charset will behave as the default charset rather than the authoritative charset. public bool CharsetSentinel { get; init; } Property Value bool Comma Set to true to parse the input as a comma-separated value. Note: nested dictionaries, such as 'a={b:1},{c:d}' are not supported. public bool Comma { get; init; } Property Value bool DecodeDotInKeys Gets whether to decode dots in keys. public bool DecodeDotInKeys { get; init; } Property Value bool Decoder Set a Decoder to affect the decoding of the input. public Decoder? Decoder { init; } Property Value Decoder DecoderWithKind Optional decoder that receives key/value DecodeKind context. When provided, this takes precedence over Decoder. public KindAwareDecoder? DecoderWithKind { init; } Property Value KindAwareDecoder Delimiter The delimiter to use when splitting key-value pairs in the encoded input. public IDelimiter Delimiter { get; init; } Property Value IDelimiter Depth By default, when nesting dictionaries QS will only decode up to 5 children deep. This depth can be overridden by setting the Depth. The depth limit helps mitigate abuse when qs is used to parse user input, and it is recommended to keep it a reasonably small number. public int Depth { get; init; } Property Value int Duplicates Change the duplicate key handling strategy. public Duplicates Duplicates { get; init; } Property Value Duplicates IgnoreQueryPrefix Set to true to ignore the leading question mark query prefix in the encoded input. public bool IgnoreQueryPrefix { get; init; } Property Value bool InterpretNumericEntities Set to true to interpret HTML numeric entities (&#...;) in the encoded input. public bool InterpretNumericEntities { get; init; } Property Value bool ListLimit QS will limit specifying indices in a list to a maximum index of 20. Any list members with an index of greater than 20 will instead be converted to a dictionary with the index as the key. This is needed to handle cases when someone sent, for example, a[999999999] and it will take significant time to iterate over this huge list. This limit can be overridden by passing a ListLimit option. public int ListLimit { get; init; } Property Value int ParameterLimit For similar reasons, by default QS will only parse up to 1000 parameters. This can be overridden by passing a ParameterLimit option. public int ParameterLimit { get; init; } Property Value int ParseLists To disable list parsing entirely, set ParseLists to false. public bool ParseLists { get; init; } Property Value bool StrictDepth Set to true to add a layer of protection by throwing an error when the limit is exceeded, allowing you to catch and handle such cases. public bool StrictDepth { get; init; } Property Value bool StrictNullHandling Set to true to decode values without = to null. public bool StrictNullHandling { get; init; } Property Value bool ThrowOnLimitExceeded Set to true to throw an error when the limit is exceeded. public bool ThrowOnLimitExceeded { get; init; } Property Value bool Methods CopyWith(bool?, Decoder?, KindAwareDecoder?, bool?, bool?, bool?, int?, Encoding?, bool?, bool?, IDelimiter?, int?, int?, Duplicates?, bool?, bool?, bool?, bool?, bool?, bool?) Creates a new instance of DecodeOptions with the specified properties changed. public DecodeOptions CopyWith(bool? allowDots = null, Decoder? decoder = null, KindAwareDecoder? decoderWithKind = null, bool? decodeDotInKeys = null, bool? allowEmptyLists = null, bool? allowSparseLists = null, int? listLimit = null, Encoding? charset = null, bool? charsetSentinel = null, bool? comma = null, IDelimiter? delimiter = null, int? depth = null, int? parameterLimit = null, Duplicates? duplicates = null, bool? ignoreQueryPrefix = null, bool? interpretNumericEntities = null, bool? parseLists = null, bool? strictDepth = null, bool? strictNullHandling = null, bool? throwOnLimitExceeded = null) Parameters allowDots bool? Set to override AllowDots decoder Decoder Set to override the decoder function decoderWithKind KindAwareDecoder Set to override the kind-aware decoder function decodeDotInKeys bool? Set to override DecodeDotInKeys allowEmptyLists bool? Set to override AllowEmptyLists allowSparseLists bool? Set to override AllowSparseLists listLimit int? Set to override ListLimit charset Encoding Set to override Charset charsetSentinel bool? Set to override CharsetSentinel comma bool? Set to override Comma delimiter IDelimiter Set to override Delimiter depth int? Set to override Depth parameterLimit int? Set to override ParameterLimit duplicates Duplicates? Set to override Duplicates ignoreQueryPrefix bool? Set to override IgnoreQueryPrefix interpretNumericEntities bool? Set to override InterpretNumericEntities parseLists bool? Set to override ParseLists strictDepth bool? Set to override StrictDepth strictNullHandling bool? Set to override StrictNullHandling throwOnLimitExceeded bool? Set to override ThrowOnLimitExceeded Returns DecodeOptions A new DecodeOptions instance with the specified changes Decode(string?, Encoding?, DecodeKind) Decode a single scalar token using the most specific decoder available. If DecoderWithKind is provided, it is always used (even when it returns null). Otherwise, the legacy two-argument Decoder is used; if neither is set, a library default is used. public object? Decode(string? value, Encoding? encoding = null, DecodeKind kind = DecodeKind.Value) Parameters value string encoding Encoding kind DecodeKind Returns object DecodeKey(string?, Encoding?) Decode a key (or key segment). Returns a string or null. public string? DecodeKey(string? value, Encoding? encoding = null) Parameters value string encoding Encoding Returns string DecodeValue(string?, Encoding?) Decode a value token. Returns any scalar (string/number/etc.) or null. public object? DecodeValue(string? value, Encoding? encoding = null) Parameters value string encoding Encoding Returns object"
  },
  "api/QsNet.Models.Decoder.html": {
    "href": "api/QsNet.Models.Decoder.html",
    "title": "Delegate Decoder | QsNet",
    "summary": "Delegate Decoder Namespace QsNet.Models Assembly QsNet.dll A function that decodes a value from a query string or form data. It takes a value and an optional encoding, returning the decoded value. public delegate object? Decoder(string? value, Encoding? encoding) Parameters value string The encoded value to decode. encoding Encoding The character encoding to use for decoding, if any. Returns object The decoded value, or null if the value is not present. Remarks When this delegate is used to decode keys (e.g., via DecodeKey(string?, Encoding?)), it must return either a string or null; returning any other type will cause InvalidOperationException at the call site."
  },
  "api/QsNet.Models.EncodeOptions.html": {
    "href": "api/QsNet.Models.EncodeOptions.html",
    "title": "Class EncodeOptions | QsNet",
    "summary": "Class EncodeOptions Namespace QsNet.Models Assembly QsNet.dll Options that configure the output of Qs.Encode. public sealed class EncodeOptions Inheritance object EncodeOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EncodeOptions(ListFormat?) Initializes a new instance of the EncodeOptions class. public EncodeOptions(ListFormat? listFormat = null) Parameters listFormat ListFormat? Properties AddQueryPrefix Set to true to add a question mark ? prefix to the encoded output. public bool AddQueryPrefix { get; init; } Property Value bool AllowDots Set to true to use dot dictionary notation in the encoded output. public bool AllowDots { get; init; } Property Value bool AllowEmptyLists Set to true to allow empty lists in the encoded output. public bool AllowEmptyLists { get; init; } Property Value bool Charset The character encoding to use. public Encoding Charset { get; init; } Property Value Encoding CharsetSentinel Set to true to announce the character by including an utf8=✓ parameter with the proper encoding of the checkmark, similar to what Ruby on Rails and others do when submitting forms. public bool CharsetSentinel { get; init; } Property Value bool CommaRoundTrip When ListFormat is set to ListFormat.Comma, you can also set CommaRoundTrip option to true or false, to append [] on single-item lists, so that they can round trip through a parse. public bool? CommaRoundTrip { get; init; } Property Value bool? DateSerializer If you only want to override the serialization of DateTime objects, you can provide a custom DateSerializer. public DateSerializer? DateSerializer { get; init; } Property Value DateSerializer Delimiter The delimiter to use when joining key-value pairs in the encoded output. public string Delimiter { get; init; } Property Value string Encode Set to false in order to disable encoding. public bool Encode { get; init; } Property Value bool EncodeDotInKeys Encode dictionary keys using dot notation by setting EncodeDotInKeys to true: Caveat: When EncodeValuesOnly is true as well as EncodeDotInKeys, only dots in keys and nothing else will be encoded. public bool EncodeDotInKeys { get; init; } Property Value bool EncodeValuesOnly Encoding can be disabled for keys by setting the EncodeValuesOnly to true. public bool EncodeValuesOnly { get; init; } Property Value bool Encoder Set an Encoder to affect the encoding of values. Note: the encoder option does not apply if Encode is false public ValueEncoder? Encoder { get; init; } Property Value ValueEncoder Filter Use the filter option to restrict which keys will be included in the encoded output. If you pass a Function, it will be called for each key to obtain the replacement value. If you pass a List, it will be used to select properties and list indices to be encoded. public IFilter? Filter { get; init; } Property Value IFilter Format The encoding format to use. The default format is Format.Rfc3986 which encodes ' ' to %20 which is backward compatible. You can also set format to Format.Rfc1738 which encodes ' ' to +. public Format Format { get; init; } Property Value Format Formatter Convenience getter for accessing the format's formatter. public Formatter Formatter { get; } Property Value Formatter Indices Deprecated: Use ListFormat instead. [Obsolete(\"Use ListFormat instead\")] public bool? Indices { get; init; } Property Value bool? ListFormat The list encoding format to use. public ListFormat? ListFormat { get; init; } Property Value ListFormat? SkipNulls Set to true to completely skip encoding keys with null values. public bool SkipNulls { get; init; } Property Value bool Sort Set a Sorter to affect the order of parameter keys. public Comparison<object?>? Sort { get; init; } Property Value Comparison<object> StrictNullHandling Set to true to distinguish between null values and empty strings. This way the encoded string null values will have no = sign. public bool StrictNullHandling { get; init; } Property Value bool Methods CopyWith(bool?, bool?, bool?, Encoding?, bool?, string?, bool?, bool?, bool?, IFilter?, Format?, ListFormat?, bool?, bool?, bool?, Comparison<object?>?, bool?, ValueEncoder?, DateSerializer?) Creates a new instance of EncodeOptions with the specified properties changed. public EncodeOptions CopyWith(bool? addQueryPrefix = null, bool? allowDots = null, bool? allowEmptyLists = null, Encoding? charset = null, bool? charsetSentinel = null, string? delimiter = null, bool? encode = null, bool? encodeDotInKeys = null, bool? encodeValuesOnly = null, IFilter? filter = null, Format? format = null, ListFormat? listFormat = null, bool? skipNulls = null, bool? strictNullHandling = null, bool? commaRoundTrip = null, Comparison<object?>? sort = null, bool? indices = null, ValueEncoder? encoder = null, DateSerializer? dateSerializer = null) Parameters addQueryPrefix bool? Set to override AddQueryPrefix allowDots bool? Set to override AllowDots allowEmptyLists bool? Set to override AllowEmptyLists charset Encoding Set to override Charset charsetSentinel bool? Set to override CharsetSentinel delimiter string Set to override Delimiter encode bool? Set to override Encode encodeDotInKeys bool? Set to override EncodeDotInKeys encodeValuesOnly bool? Set to override EncodeValuesOnly filter IFilter Set to override Filter format Format? Set to override Format listFormat ListFormat? Set to override ListFormat skipNulls bool? Set to override SkipNulls strictNullHandling bool? Set to override StrictNullHandling commaRoundTrip bool? Set to override CommaRoundTrip sort Comparison<object> Set to override Sort indices bool? Set to override Indices (deprecated) encoder ValueEncoder Set to override the encoder function dateSerializer DateSerializer Set to override the date serializer function Returns EncodeOptions A new EncodeOptions instance with the specified changes GetDateSerializer(DateTime) Serializes a DateTime instance to a string. Uses the provided DateSerializer function if available, otherwise uses DateTime ISO format. public string GetDateSerializer(DateTime date) Parameters date DateTime The date to serialize Returns string The serialized date string GetEncoder(object?, Encoding?, Format?) Encodes a value to a string. Uses the provided encoder if available, otherwise uses Utils.Encode. public string GetEncoder(object? value, Encoding? encoding = null, Format? format = null) Parameters value object The value to encode encoding Encoding The encoding to use format Format? The format to use Returns string The encoded string"
  },
  "api/QsNet.Models.FunctionFilter.html": {
    "href": "api/QsNet.Models.FunctionFilter.html",
    "title": "Class FunctionFilter | QsNet",
    "summary": "Class FunctionFilter Namespace QsNet.Models Assembly QsNet.dll A filter that applies a function to a key-value pair. The function takes the key as a string and the value as object, and returns a transformed value. public class FunctionFilter : IFilter Inheritance object FunctionFilter Implements IFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FunctionFilter(Func<string, object?, object?>) Initializes a new instance of the FunctionFilter class. public FunctionFilter(Func<string, object?, object?> function) Parameters function Func<string, object, object> The function to apply Properties Function The function to apply to key-value pairs. public Func<string, object?, object?> Function { get; } Property Value Func<string, object, object>"
  },
  "api/QsNet.Models.IDelimiter.html": {
    "href": "api/QsNet.Models.IDelimiter.html",
    "title": "Interface IDelimiter | QsNet",
    "summary": "Interface IDelimiter Namespace QsNet.Models Assembly QsNet.dll Represents a delimiter used for splitting key-value pairs. public interface IDelimiter Methods Split(string) Splits the input string using this delimiter. IEnumerable<string> Split(string input) Parameters input string The input string to split Returns IEnumerable<string> A list of split strings"
  },
  "api/QsNet.Models.IFilter.html": {
    "href": "api/QsNet.Models.IFilter.html",
    "title": "Interface IFilter | QsNet",
    "summary": "Interface IFilter Namespace QsNet.Models Assembly QsNet.dll Represents a filter that can be applied to query string processing. public interface IFilter"
  },
  "api/QsNet.Models.IterableFilter.html": {
    "href": "api/QsNet.Models.IterableFilter.html",
    "title": "Class IterableFilter | QsNet",
    "summary": "Class IterableFilter Namespace QsNet.Models Assembly QsNet.dll A filter that applies to an IEnumerable. This can be used to filter or transform the elements of the IEnumerable. public class IterableFilter : IFilter Inheritance object IterableFilter Implements IFilter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IterableFilter(IEnumerable) Initializes a new instance of the IterableFilter class. public IterableFilter(IEnumerable iterable) Parameters iterable IEnumerable The enumerable collection Properties Iterable The enumerable collection. public IEnumerable Iterable { get; } Property Value IEnumerable"
  },
  "api/QsNet.Models.KindAwareDecoder.html": {
    "href": "api/QsNet.Models.KindAwareDecoder.html",
    "title": "Delegate KindAwareDecoder | QsNet",
    "summary": "Delegate KindAwareDecoder Namespace QsNet.Models Assembly QsNet.dll A function that decodes a value from a query string or form data with key/value context. The DecodeKind indicates whether the token is a key (or key segment) or a value. public delegate object? KindAwareDecoder(string? value, Encoding? encoding, DecodeKind kind) Parameters value string The encoded value to decode. encoding Encoding The character encoding to use for decoding, if any. kind DecodeKind Whether this token is a Key or Value. Returns object The decoded value, or null if the value is not present. Remarks When kind is Key, the decoder must return a string or null. Returning any other type will cause InvalidOperationException at the call site (see DecodeKey(string?, Encoding?))."
  },
  "api/QsNet.Models.RegexDelimiter.html": {
    "href": "api/QsNet.Models.RegexDelimiter.html",
    "title": "Class RegexDelimiter | QsNet",
    "summary": "Class RegexDelimiter Namespace QsNet.Models Assembly QsNet.dll Regex-based delimiter for complex pattern matching. This is useful for delimiters that require regular expression matching, such as \\s*;\\s* for semicolon-separated values with optional whitespace. It uses the Regex.Split method for splitting the input string. public sealed record RegexDelimiter : IDelimiter, IEquatable<RegexDelimiter> Inheritance object RegexDelimiter Implements IDelimiter IEquatable<RegexDelimiter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RegexDelimiter(string) Regex-based delimiter for complex pattern matching. This is useful for delimiters that require regular expression matching, such as \\s*;\\s* for semicolon-separated values with optional whitespace. It uses the Regex.Split method for splitting the input string. public RegexDelimiter(string Pattern) Parameters Pattern string Properties Pattern The regex pattern used for splitting the input string. public string Pattern { get; init; } Property Value string Methods Split(string) Splits the input string using the regex delimiter. public IEnumerable<string> Split(string input) Parameters input string The input string to split Returns IEnumerable<string> A list of split strings"
  },
  "api/QsNet.Models.StringDelimiter.html": {
    "href": "api/QsNet.Models.StringDelimiter.html",
    "title": "Class StringDelimiter | QsNet",
    "summary": "Class StringDelimiter Namespace QsNet.Models Assembly QsNet.dll String-based delimiter for better performance with simple delimiters. This is suitable for common delimiters like &, ,, or ;. It uses the String.Split method for efficient splitting. public sealed record StringDelimiter : IDelimiter, IEquatable<StringDelimiter> Inheritance object StringDelimiter Implements IDelimiter IEquatable<StringDelimiter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors StringDelimiter(string) String-based delimiter for better performance with simple delimiters. This is suitable for common delimiters like &, ,, or ;. It uses the String.Split method for efficient splitting. public StringDelimiter(string Value) Parameters Value string Properties Value public string Value { get; init; } Property Value string Methods Split(string) Splits the input string using the string delimiter. public IEnumerable<string> Split(string input) Parameters input string The input string to split Returns IEnumerable<string> A list of split strings"
  },
  "api/QsNet.Models.ValueEncoder.html": {
    "href": "api/QsNet.Models.ValueEncoder.html",
    "title": "Delegate ValueEncoder | QsNet",
    "summary": "Delegate ValueEncoder Namespace QsNet.Models Assembly QsNet.dll ValueEncoder function that takes a value, encoding, and format, and returns a String representation of the value. The encoder can be used to customize how values are encoded in the query string. If no encoder is provided, Utils.Encode will be used by default. public delegate string ValueEncoder(object? value, Encoding? encoding, Format? format) Parameters value object The value to encode encoding Encoding The character encoding to use format Format? The format to use Returns string The encoded string representation"
  },
  "api/QsNet.Models.html": {
    "href": "api/QsNet.Models.html",
    "title": "Namespace QsNet.Models | QsNet",
    "summary": "Namespace QsNet.Models Classes DecodeOptions Options that configure the output of Qs.Decode. EncodeOptions Options that configure the output of Qs.Encode. FunctionFilter A filter that applies a function to a key-value pair. The function takes the key as a string and the value as object, and returns a transformed value. IterableFilter A filter that applies to an IEnumerable. This can be used to filter or transform the elements of the IEnumerable. RegexDelimiter Regex-based delimiter for complex pattern matching. This is useful for delimiters that require regular expression matching, such as \\s*;\\s* for semicolon-separated values with optional whitespace. It uses the Regex.Split method for splitting the input string. StringDelimiter String-based delimiter for better performance with simple delimiters. This is suitable for common delimiters like &, ,, or ;. It uses the String.Split method for efficient splitting. Interfaces IDelimiter Represents a delimiter used for splitting key-value pairs. IFilter Represents a filter that can be applied to query string processing. Delegates DateSerializer DateSerializer function that takes a DateTime and returns a String representation of the date. This can be used to customize how DateTime objects are serialized in the encoded output. If no serializer is provided, the default ISO format will be used. Decoder A function that decodes a value from a query string or form data. It takes a value and an optional encoding, returning the decoded value. KindAwareDecoder A function that decodes a value from a query string or form data with key/value context. The DecodeKind indicates whether the token is a key (or key segment) or a value. ValueEncoder ValueEncoder function that takes a value, encoding, and format, and returns a String representation of the value. The encoder can be used to customize how values are encoded in the query string. If no encoder is provided, Utils.Encode will be used by default."
  },
  "api/QsNet.Qs.html": {
    "href": "api/QsNet.Qs.html",
    "title": "Class Qs | QsNet",
    "summary": "Class Qs Namespace QsNet Assembly QsNet.dll Provides static methods for encoding and decoding query strings and dictionaries. Supports conversion between query strings and Dictionary<object, object?> objects with configurable parsing and encoding options. public static class Qs Inheritance object Qs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Decode(object?, DecodeOptions?) Decode a query string or a Dictionary into a Dictionary<object, object?>. public static Dictionary<string, object?> Decode(object? input, DecodeOptions? options = null) Parameters input object The query string or Dictionary to decode options DecodeOptions Optional decoder settings Returns Dictionary<string, object> The decoded Dictionary Exceptions ArgumentException If the input is not a string or Dictionary InvalidOperationException If limits are exceeded and ThrowOnLimitExceeded is true Encode(object?, EncodeOptions?) Encode a Dictionary or IEnumerable into a query string. public static string Encode(object? data, EncodeOptions? options = null) Parameters data object The data to encode options EncodeOptions Optional encoder settings Returns string The encoded query string Exceptions InvalidOperationException Thrown when options/limits are violated during encoding"
  },
  "api/QsNet.html": {
    "href": "api/QsNet.html",
    "title": "Namespace QsNet | QsNet",
    "summary": "Namespace QsNet Classes Extensions Extensions for encoding and decoding query strings. Provides methods to convert between query strings and dictionaries. This class is part of the QsNet library, which handles query string encoding and decoding. It includes methods for both encoding a dictionary into a query string and decoding a query string into a dictionary. Qs Provides static methods for encoding and decoding query strings and dictionaries. Supports conversion between query strings and Dictionary<object, object?> objects with configurable parsing and encoding options."
  },
  "docs/decoding.html": {
    "href": "docs/decoding.html",
    "title": "| QsNet",
    "summary": "Decoding Nested dictionaries Qs.Decode(\"foo[bar]=baz\"); // => { \"foo\": { \"bar\": \"baz\" } } Qs.Decode(\"a%5Bb%5D=c\"); // => { \"a\": { \"b\": \"c\" } } Qs.Decode(\"foo[bar][baz]=foobarbaz\"); // => { \"foo\": { \"bar\": { \"baz\": \"foobarbaz\" } } } Depth (default: 5) Beyond the configured depth, remaining bracket content is kept as literal text: Qs.Decode(\"a[b][c][d][e][f][g][h][i]=j\"); // => { \"a\": { \"b\": { \"c\": { \"d\": { \"e\": { \"f\": { \"[g][h][i]\": \"j\" } } } } } } } Override depth: Qs.Decode(\"a[b][c][d][e][f][g][h][i]=j\", new DecodeOptions { Depth = 1 }); // => { \"a\": { \"b\": { \"[c][d][e][f][g][h][i]\": \"j\" } } } Parameter limit Qs.Decode(\"a=b&c=d\", new DecodeOptions { ParameterLimit = 1 }); // => { \"a\": \"b\" } Ignore leading ? Qs.Decode(\"?a=b&c=d\", new DecodeOptions { IgnoreQueryPrefix = true }); // => { \"a\": \"b\", \"c\": \"d\" } Custom delimiter (string or regex) Qs.Decode(\"a=b;c=d\", new DecodeOptions { Delimiter = new StringDelimiter(\";\") }); // => { \"a\": \"b\", \"c\": \"d\" } Qs.Decode(\"a=b;c=d\", new DecodeOptions { Delimiter = new RegexDelimiter(\"[;,]\") }); // => { \"a\": \"b\", \"c\": \"d\" } Dot-notation and \"decode dots in keys\" Qs.Decode(\"a.b=c\", new DecodeOptions { AllowDots = true }); // => { \"a\": { \"b\": \"c\" } } Qs.Decode( \"name%252Eobj.first=John&name%252Eobj.last=Doe\", new DecodeOptions { DecodeDotInKeys = true } ); // => { \"name.obj\": { \"first\": \"John\", \"last\": \"Doe\" } } Empty lists Qs.Decode(\"foo[]&bar=baz\", new DecodeOptions { AllowEmptyLists = true }); // => { \"foo\": [], \"bar\": \"baz\" } Duplicates Qs.Decode(\"foo=bar&foo=baz\"); // => { \"foo\": [\"bar\", \"baz\"] } Qs.Decode(\"foo=bar&foo=baz\", new DecodeOptions { Duplicates = Duplicates.Combine }); // => same as above Qs.Decode(\"foo=bar&foo=baz\", new DecodeOptions { Duplicates = Duplicates.First }); // => { \"foo\": \"bar\" } Qs.Decode(\"foo=bar&foo=baz\", new DecodeOptions { Duplicates = Duplicates.Last }); // => { \"foo\": \"baz\" } Charset and sentinel // Latin1 Qs.Decode(\"a=%A7\", new DecodeOptions { Charset = Encoding.Latin1 }); // => { \"a\": \"§\" } // Sentinels Qs.Decode(\"utf8=%E2%9C%93&a=%C3%B8\", new DecodeOptions { Charset = Encoding.Latin1, CharsetSentinel = true }); // => { \"a\": \"ø\" } Qs.Decode(\"utf8=%26%2310003%3B&a=%F8\", new DecodeOptions { Charset = Encoding.UTF8, CharsetSentinel = true }); // => { \"a\": \"ø\" } Interpret numeric entities (&#1234;) Qs.Decode( \"a=%26%239786%3B\", new DecodeOptions { Charset = Encoding.Latin1, InterpretNumericEntities = true } ); // => { \"a\": \"☺\" } Lists Qs.Decode(\"a[]=b&a[]=c\"); // => { \"a\": [\"b\", \"c\"] } Qs.Decode(\"a[1]=c&a[0]=b\"); // => { \"a\": [\"b\", \"c\"] } Qs.Decode(\"a[1]=b&a[15]=c\"); // => { \"a\": [\"b\", \"c\"] } Qs.Decode(\"a[]=&a[]=b\"); // => { \"a\": [\"\", \"b\"] } Large indices convert to a dictionary by default: Qs.Decode(\"a[100]=b\"); // => { \"a\": { 100: \"b\" } } Disable list parsing: Qs.Decode(\"a[]=b\", new DecodeOptions { ParseLists = false }); // => { \"a\": { 0: \"b\" } } Mixing notations merges into a dictionary: Qs.Decode(\"a[0]=b&a[b]=c\"); // => { \"a\": { 0: \"b\", \"b\": \"c\" } } Comma-separated values: Qs.Decode(\"a=b,c\", new DecodeOptions { Comma = true }); // => { \"a\": [\"b\", \"c\"] } Primitive/scalar values All values decode as strings by default: Qs.Decode(\"a=15&b=true&c=null\"); // => { \"a\": \"15\", \"b\": \"true\", \"c\": \"null\" }"
  },
  "docs/encoding.html": {
    "href": "docs/encoding.html",
    "title": "| QsNet",
    "summary": "Encoding Basics Qs.Encode(new Dictionary<string, object?> { [\"a\"] = \"b\" }); // => \"a=b\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = \"c\" } }); // => \"a%5Bb%5D=c\" Disable URI encoding for readability: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = \"c\" } }, new EncodeOptions { Encode = false } ); // => \"a[b]=c\" Values-only encoding: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = new List<object?> { \"d\", \"e=f\" }, [\"f\"] = new List<object?> { new List<object?> { \"g\" }, new List<object?> { \"h\" }, }, }, new EncodeOptions { EncodeValuesOnly = true } ); // => \"a=b&c[0]=d&c[1]=e%3Df&f[0][0]=g&f[1][0]=h\" Custom encoder: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = \"č\" }, }, new EncodeOptions { Encoder = (str, _, _) => str?.ToString() == \"č\" ? \"c\" : str?.ToString() ?? \"\", } ); // => \"a[b]=c\" List formats var data = new Dictionary<string, object?> { [\"a\"] = new List<object?> { \"b\", \"c\" } }; var options = new EncodeOptions { Encode = false }; // default (indices) Qs.Encode(data, options.CopyWith(listFormat: ListFormat.Indices)); // => \"a[0]=b&a[1]=c\" // brackets Qs.Encode(data, options.CopyWith(listFormat: ListFormat.Brackets)); // => \"a[]=b&a[]=c\" // repeat Qs.Encode(data, options.CopyWith(listFormat: ListFormat.Repeat)); // => \"a=b&a=c\" // comma Qs.Encode(data, options.CopyWith(listFormat: ListFormat.Comma)); // => \"a=b,c\" Nested dictionaries Qs.Encode( new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = new Dictionary<string, object?> { [\"c\"] = \"d\", [\"e\"] = \"f\" }, }, }, new EncodeOptions { Encode = false } ); // => \"a[b][c]=d&a[b][e]=f\" Dot notation: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = new Dictionary<string, object?> { [\"c\"] = \"d\", [\"e\"] = \"f\" }, }, }, new EncodeOptions { Encode = false, AllowDots = true } ); // => \"a.b.c=d&a.b.e=f\" Encode dots in keys: Qs.Encode( new Dictionary<string, object?> { [\"name.obj\"] = new Dictionary<string, object?> { [\"first\"] = \"John\", [\"last\"] = \"Doe\", }, }, new EncodeOptions { AllowDots = true, EncodeDotInKeys = true } ); // => \"name%252Eobj.first=John&name%252Eobj.last=Doe\" Allow empty lists: Qs.Encode( new Dictionary<string, object?> { [\"foo\"] = new List<object?>(), [\"bar\"] = \"baz\" }, new EncodeOptions { Encode = false, AllowEmptyLists = true } ); // => \"foo[]&bar=baz\" Empty strings and nulls: Qs.Encode(new Dictionary<string, object?> { [\"a\"] = \"\" }); // => \"a=\" Return empty string for empty containers: Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new List<object?>() }); // => \"\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?>() }); // => \"\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new List<object?> { new Dictionary<string, object?>() } }); // => \"\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = new List<object?>() } }); // => \"\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = new Dictionary<string, object?> { [\"b\"] = new Dictionary<string, object?>() } }); // => \"\" Omit Undefined: Qs.Encode(new Dictionary<string, object?> { [\"a\"] = null, [\"b\"] = Undefined.Create() }); // => \"a=\" Add query prefix: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = \"d\" }, new EncodeOptions { AddQueryPrefix = true } ); // => \"?a=b&c=d\" Custom delimiter: Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = \"d\" }, new EncodeOptions { Delimiter = \";\" } ); // => \"a=b;c=d\" Dates By default, DateTime is serialized using ToString() in ISO 8601 format. var date = new DateTime(1970, 1, 1, 0, 0, 0, 7, DateTimeKind.Utc); Qs.Encode( new Dictionary<string, object?> { [\"a\"] = date }, new EncodeOptions { Encode = false } ); // => \"a=1970-01-01T00:00:00.0070000Z\" Qs.Encode( new Dictionary<string, object?> { [\"a\"] = date }, new EncodeOptions { Encode = false, DateSerializer = d => ((DateTimeOffset)d).ToUnixTimeMilliseconds().ToString(), } ); // => \"a=7\" Sorting & filtering // Sort keys Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"c\", [\"z\"] = \"y\", [\"b\"] = \"f\", }, new EncodeOptions { Encode = false, Sort = (a, b) => string.Compare(a?.ToString(), b?.ToString(), StringComparison.Ordinal), } ); // => \"a=c&b=f&z=y\" // Filter by function (drop/transform values) var epochStart = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc); var testDate = epochStart.AddMilliseconds(123); Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = \"d\", [\"e\"] = new Dictionary<string, object?> { [\"f\"] = testDate, [\"g\"] = new List<object?> { 2 }, }, }, new EncodeOptions { Encode = false, Filter = new FunctionFilter( (prefix, value) => prefix switch { \"b\" => Undefined.Create(), \"e[f]\" => (long)((DateTime)value! - epochStart).TotalMilliseconds, \"e[g][0]\" => Convert.ToInt32(value) * 2, _ => value, } ), } ); // => \"a=b&c=d&e[f]=123&e[g][0]=4\" // Filter by explicit list of keys/indices Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = \"d\", [\"e\"] = \"f\", }, new EncodeOptions { Encode = false, Filter = new IterableFilter(new List<object> { \"a\", \"e\" }), } ); // => \"a=b&e=f\" Qs.Encode( new Dictionary<string, object?> { [\"a\"] = new List<object?> { \"b\", \"c\", \"d\" }, [\"e\"] = \"f\", }, new EncodeOptions { Encode = false, Filter = new IterableFilter(new List<object> { \"a\", 0, 2 }), } ); // => \"a[0]=b&a[2]=d\" Null handling // Treat null values like empty strings by default Qs.Encode(new Dictionary<string, object?> { [\"a\"] = null, [\"b\"] = \"\" }); // => \"a=&b=\" // Cannot distinguish between parameters with and without equal signs Qs.Decode(\"a&b=\"); // => { \"a\": \"\", \"b\": \"\" } // Distinguish between null values and empty strings using strict null handling Qs.Encode( new Dictionary<string, object?> { [\"a\"] = null, [\"b\"] = \"\" }, new EncodeOptions { StrictNullHandling = true } ); // => \"a&b=\" // Decode values without equals back to null using strict null handling Qs.Decode(\"a&b=\", new DecodeOptions { StrictNullHandling = true }); // => { \"a\": null, \"b\": \"\" } // Completely skip rendering keys with null values using skip nulls Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"b\", [\"c\"] = null }, new EncodeOptions { SkipNulls = true } ); // => \"a=b\" Charset handling // Encode using Latin1 charset Qs.Encode( new Dictionary<string, object?> { [\"æ\"] = \"æ\" }, new EncodeOptions { Charset = Encoding.Latin1 } ); // => \"%E6=%E6\" // Convert characters that don't exist in Latin1 to numeric entities Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"☺\" }, new EncodeOptions { Charset = Encoding.Latin1 } ); // => \"a=%26%239786%3B\" // Announce charset using charset sentinel option with UTF-8 Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"☺\" }, new EncodeOptions { CharsetSentinel = true } ); // => \"utf8=%E2%9C%93&a=%E2%98%BA\" // Announce charset using charset sentinel option with Latin1 Qs.Encode( new Dictionary<string, object?> { [\"a\"] = \"æ\" }, new EncodeOptions { Charset = Encoding.Latin1, CharsetSentinel = true } ); // => \"utf8=%26%2310003%3B&a=%E6\" RFC 3986 vs RFC 1738 space encoding Qs.Encode(new Dictionary<string, object?> { [\"a\"] = \"b c\" }); // => \"a=b%20c\" (RFC 3986 default) Qs.Encode(new Dictionary<string, object?> { [\"a\"] = \"b c\" }, new EncodeOptions { Format = Format.Rfc3986 }); // => \"a=b%20c\" Qs.Encode(new Dictionary<string, object?> { [\"a\"] = \"b c\" }, new EncodeOptions { Format = Format.Rfc1738 }); // => \"a=b+c\""
  },
  "docs/installation.html": {
    "href": "docs/installation.html",
    "title": "| QsNet",
    "summary": "Installation NuGet Package Manager Install-Package QsNet .NET CLI dotnet add package QsNet Package Reference <PackageReference Include=\"QsNet\" Version=\"<version>\" /> Requirements .NET 8.0+"
  },
  "index.html": {
    "href": "index.html",
    "title": "QsNet | QsNet",
    "summary": "QsNet A query string encoding and decoding library for C#/.NET. Ported from qs for JavaScript. Highlights Nested dictionaries and lists: foo[bar][baz]=qux ⇄ { \"foo\": { \"bar\": { \"baz\": \"qux\" } } } Multiple list formats (indices, brackets, repeat, comma) Dot-notation support (a.b=c) and \".\"-encoding toggles UTF-8 and Latin1 charsets, plus optional charset sentinel (utf8=✓) Custom encoders/decoders, key sorting, filtering, and strict null handling Supports DateTime serialization via a pluggable serializer Extensive tests (xUnit + FluentAssertions), performance-minded implementation Usage using QsNet; // Decode Dictionary<string, object?> obj = Qs.Decode(\"foo[bar]=baz&foo[list][]=a&foo[list][]=b\"); // -> { \"foo\": { \"bar\": \"baz\", \"list\": [\"a\", \"b\"] } } // Encode string qs = Qs.Encode(new Dictionary<string, object?> { [\"foo\"] = new Dictionary<string, object?> { [\"bar\"] = \"baz\" } }); // -> \"foo%5Bbar%5D=baz\" Design notes Performance: The implementation mirrors qs semantics but is optimized for C#/.NET. Deep parsing, list compaction, and cycle-safe compaction are implemented iteratively where it matters. Safety: Defaults (depth, parameterLimit) help mitigate abuse in user-supplied inputs; you can loosen them when you fully trust the source. Interop: Exposes knobs similar to qs (filters, sorters, custom encoders/decoders) to make migrations straightforward. Other ports Port Repository Package Dart techouse/qs Python techouse/qs_codec Kotlin / JVM + Android AAR techouse/qs-kotlin Swift / Objective-C techouse/qs-swift Node.js (original) ljharb/qs Special thanks to the authors of qs for JavaScript: Jordan Harband TJ Holowaychuk License BSD 3-Clause © techouse"
  }
}