name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_call:
    
permissions:
  contents: read

concurrency:
  group: test-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  lint:
    name: Lint & Build (Release, warn-as-error)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.[cC][sS]proj', '**/*.props', '**/*.targets') }}
          restore-keys: nuget-${{ runner.os }}-
      - name: Restore
        run: dotnet restore
      - name: dotnet format (verify)
        run: dotnet format --verify-no-changes --verbosity minimal
      - name: Build (warnings -> errors)
        run: dotnet build --configuration Release -p:TreatWarningsAsErrors=true --no-restore
  test:
    name: Test ${{ matrix.dotnet }} on ${{ matrix.os }}
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        dotnet: 
          - '8.0.x'
          - '9.0.x'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ matrix.dotnet }}-${{ hashFiles('**/*.[cC][sS]proj') }}
          restore-keys: |
            nuget-${{ runner.os }}-${{ matrix.dotnet }}-
            nuget-${{ runner.os }}-
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test + Coverage
        run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --collect "XPlat Code Coverage"
      - name: Upload TRX
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.dotnet }}
          path: '**/*.trx'
          overwrite: true
          retention-days: 7
      - name: Upload raw coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.dotnet }}
          path: QsNet.Tests/TestResults/**/*.cobertura.xml
          if-no-files-found: error
          overwrite: true
          retention-days: 7
  ensure_compatibility:
    name: Ensure compatibility with qs (JS vs C#)
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Install JS dependencies
        run: npm install
        working-directory: QsNet.Comparison/js
      - name: Run C# comparison
        run: dotnet run --project QsNet.Comparison -c Release > cs.out
      - name: Run Node comparison
        run: node QsNet.Comparison/js/qs.js > node.out
      - name: Show first lines (debug)
        if: ${{ always() }}
        run: |
          echo "=== C# (first 80 lines) ==="
          head -n 80 cs.out || true
          echo "=== Node (first 80 lines) ==="
          head -n 80 node.out || true
      - name: Diff outputs
        run: |
          set -eo pipefail
          diff -u node.out cs.out > diff.out || (echo "::error::Differences found between Node and C# outputs. See artifact diff.out"; exit 1)
      - name: Upload diff artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: comparison-diff
          path: |
            node.out
            cs.out
            diff.out
  coverage:
    name: Coverage (merged)
    runs-on: ubuntu-latest
    needs: 
      - test
      - ensure_compatibility
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Test w/ coverage (8.0â€”single run)
        run: dotnet test --configuration Release --no-build --collect "XPlat Code Coverage" --results-directory coverage --settings coverlet.runsettings
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Generate consolidated report
        run: reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coverage/report" -reporttypes:"Html;Cobertura;JsonSummary"
      - name: Upload to Codecov
        uses: codecov/codecov-action@v5
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: coverage/report/Cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      - name: Upload coverage report artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/report/
          retention-days: 7